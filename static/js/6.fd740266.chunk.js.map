{"version":3,"sources":["components/Contact/EmailLink.js","pages/Contact.js"],"names":["validateText","text","test","length","messages","EmailLink","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","href","Contact","Main","title","description","to","ContactIcons"],"mappings":"sKAEMA,EAAe,SAACC,GAIlB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,QAG3BC,EAAW,CACb,KACA,QACA,8BACA,4BACA,sBACA,oBACA,8BACA,SACA,KACA,iCACA,8BACA,UA6DaC,EAxCG,WAChB,IAGA,EAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAiCF,mBAASF,EAASG,IAAnD,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA2BJ,mBAASF,EAASG,GAAKJ,QAAlD,mBAAOQ,EAAP,KAAaC,EAAb,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAkBA,OA3CgB,SAACC,EAAUC,GAC3B,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,YACbJ,GACH,OAAO,kBAAMO,cAAcF,IAE7B,OAAO,eACN,CAACL,IAYJQ,EAAY,WACV,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAXO,IAWQP,EAASG,GAAKJ,SAC/BsB,GAAU,EACVC,EAAU,GAERD,IAAWrB,EAASD,OACtBW,GAAY,IAEZJ,EAAcN,EAASqB,GAAQE,MAAM,EAAGD,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,MAEtBb,EArBW,GAqBQ,MAGpB,qBACEe,UAAU,mBACVC,MAAO7B,EAAaS,GAAW,GAAK,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,IAChCkB,aAAc,kBAAOzB,EAAMH,EAASD,QAAWW,GAAY,IAJ7D,SAME,oBAAGmB,KAAMjC,EAAaS,GAAb,iBAAkCA,EAAlC,cAAwD,GAAjE,UACE,+BAAOA,IACP,wD,QCjDKyB,UApBC,kBACd,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,YAAY,oDAFd,SAIE,0BAAST,UAAU,OAAOP,GAAG,UAA7B,UACE,iCACE,qBAAKO,UAAU,QAAf,SACE,oBAAI,cAAY,UAAhB,SAA0B,cAAC,IAAD,CAAMU,GAAG,WAAT,2BAG9B,sBAAKV,UAAU,WAAf,UACE,iFACA,cAAC,EAAD,OAEF,cAACW,EAAA,EAAD","file":"static/js/6.fd740266.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\n\r\nconst validateText = (text) => {\r\n    // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n    // eslint-disable-next-line no-useless-escape\r\n    const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n    return re.test(text) || text.length === 0;\r\n  };\r\n\r\nconst messages = [\r\n    'hi',\r\n    'hello',\r\n    'you can message me anything',\r\n    'just please don\\'t spam me',\r\n    'you can just say hi',\r\n    'how are you doing',\r\n    'i\\'d like you to work for us',\r\n    'please',\r\n    'or',\r\n    'what am I currently working on',\r\n    'whatever is cool with me :)',\r\n    'thanks'\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n    const savedCallback = useRef();\r\n  \r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    useEffect(() => {\r\n      if (delay) {\r\n        const id = setInterval(() => {\r\n          savedCallback.current();\r\n        }, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n      return () => {}; // pass linter\r\n    }, [delay]);\r\n  };\r\n  \r\n  const EmailLink = () => {\r\n    const hold = 50; // ticks to wait after message is complete before rendering next message\r\n    const delay = 50; // tick length in mS\r\n  \r\n    const [idx, updateIter] = useState(0); // points to current message\r\n    const [message, updateMessage] = useState(messages[idx]);\r\n    const [char, updateChar] = useState(messages[idx].length); // points to current char\r\n    const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n  \r\n    useInterval(() => {\r\n      let newIdx = idx;\r\n      let newChar = char;\r\n      if (char - hold >= messages[idx].length) {\r\n        newIdx += 1;\r\n        newChar = 0;\r\n      }\r\n      if (newIdx === messages.length) {\r\n        setIsActive(false);\r\n      } else {\r\n        updateMessage(messages[newIdx].slice(0, newChar));\r\n        updateIter(newIdx);\r\n        updateChar(newChar + 1);\r\n      }\r\n    }, isActive ? delay : null);\r\n  \r\n    return (\r\n      <div\r\n        className=\"inline-container\"\r\n        style={validateText(message) ? {} : { color: 'red' }}\r\n        onMouseEnter={() => setIsActive(false)}\r\n        onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\r\n      >\r\n        <a href={validateText(message) ? `mailto:${message}@gmail.com` : ''}>\r\n          <span>{message}</span>\r\n          <span>@gmail.com.com</span>\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default EmailLink;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Philip Mak via email @ pmak0116@gmail.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>Feel free to get in touch. You can email me at: </p>\n        <EmailLink />\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"sourceRoot":""}